# --------------------------
# Classificação de Mamografias com Redes MLP
# --------------------------

# 1. Importação das bibliotecas necessárias
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# 2. Leitura dos dados do arquivo Excel (sem cabeçalho)
df = pd.read_excel("dadosmamografia.xlsx", engine="openpyxl", header=None)

# 3. Definição dos nomes das colunas (5 entradas + 1 saída)
df.columns = ['birads', 'idade', 'forma', 'margem', 'densidade', 'label']

# 4. Separação dos dados de entrada (X) e saída (y)
X = df[['birads', 'idade', 'forma', 'margem', 'densidade']].values
y = df['label'].values

# 5. Normalização dos dados de entrada para o intervalo [0, 1]
scaler = MinMaxScaler()
X = scaler.fit_transform(X)

# 6. Divisão dos dados: 60% treino, 20% validação, 20% teste
X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.25, random_state=42)

# 7. Treinamento das redes com diferentes topologias (5, 10, 15, 30 neurônios)
#    e 3 execuções por topologia
resultados = []

for neurons in [5, 10, 15, 30]:
    for seed in [0, 1, 2]:
        tf.random.set_seed(seed)  # Define a semente para reprodutibilidade

        # Construção da rede MLP com uma camada escondida
        model = Sequential([
            Dense(neurons, activation='tanh', input_shape=(5,)),   # Camada escondida com 'tanh' (tansig)
            Dense(1, activation='linear')                          # Camada de saída com ativação linear (purelin)
        ])

        # Compilação do modelo
        model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])

        # Treinamento do modelo
        model.fit(X_train, y_train, validation_data=(X_val, y_val),
                  epochs=100, batch_size=16, verbose=0)

        # Predição no conjunto de teste
        y_pred = model.predict(X_test).flatten()
        y_pred_class = (y_pred > 0.5).astype(int)  # Classificação binária com threshold 0.5

        # Cálculo da acurácia e matriz de confusão
        acc = accuracy_score(y_test, y_pred_class)
        cm = confusion_matrix(y_test, y_pred_class)

        # Armazena os resultados
        resultados.append({
            'neurônios': neurons,
            'execução': seed + 1,
            'acurácia_teste': acc
        })

        # Exibição da matriz de confusão
        disp = ConfusionMatrixDisplay(cm)
        disp.plot()
        plt.title(f'{neurons} neurônios - Execução {seed + 1}')
        plt.show()

# 8. Geração da tabela de acurácias
df_resultados = pd.DataFrame(resultados)
print("\nTabela de Acurácias:")
print(df_resultados)

# 9. Identificação da melhor topologia (maior acurácia)
melhor = df_resultados.loc[df_resultados['acurácia_teste'].idxmax()]
print(f"\nMelhor topologia: {melhor['neurônios']} neurônios, execução {melhor['execução']}, acurácia = {melhor['acurácia_teste']:.4f}")
